// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NfvoServiceClient is the client API for NfvoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NfvoServiceClient interface {
	// StartLocalVnfm starts a VNF Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the nfvo/config.yaml
	//   3. all bytes constituting the NFV Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalVnfm(ctx context.Context, opts ...grpc.CallOption) (NfvoService_StartLocalVnfmClient, error)
	// StartFromPreviousVnfm starts a new VNF Manager based on a previous one.
	// If the previous VNF Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousVnfm(ctx context.Context, in *StartFromPreviousVnfmRequest, opts ...grpc.CallOption) (*StartVnfmResponse, error)
	// StartVnfmRequest starts a new VNF Manager based on its specification.
	StartVnfm(ctx context.Context, in *StartVnfmRequest, opts ...grpc.CallOption) (*StartVnfmResponse, error)
	// Searches for VNF Manager(s) known to this instance
	ListVnfms(ctx context.Context, in *ListVnfmsRequest, opts ...grpc.CallOption) (*ListVnfmsResponse, error)
	// Subscribe listens to new VNF Manager(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (NfvoService_SubscribeClient, error)
	// GetVnfm retrieves details of a single VNF Manager
	GetVnfm(ctx context.Context, in *GetVnfmRequest, opts ...grpc.CallOption) (*GetVnfmResponse, error)
	// Listen listens to VNF Manager updates and log output of a running VNF Manager
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (NfvoService_ListenClient, error)
	// StopVnfm stops a currently running VNF Manager
	StopVnfm(ctx context.Context, in *StopVnfmRequest, opts ...grpc.CallOption) (*StopVnfmResponse, error)
}

type nfvoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNfvoServiceClient(cc grpc.ClientConnInterface) NfvoServiceClient {
	return &nfvoServiceClient{cc}
}

func (c *nfvoServiceClient) StartLocalVnfm(ctx context.Context, opts ...grpc.CallOption) (NfvoService_StartLocalVnfmClient, error) {
	stream, err := c.cc.NewStream(ctx, &NfvoService_ServiceDesc.Streams[0], "/v1.NfvoService/StartLocalVnfm", opts...)
	if err != nil {
		return nil, err
	}
	x := &nfvoServiceStartLocalVnfmClient{stream}
	return x, nil
}

type NfvoService_StartLocalVnfmClient interface {
	Send(*StartLocalVnfmRequest) error
	CloseAndRecv() (*StartVnfmResponse, error)
	grpc.ClientStream
}

type nfvoServiceStartLocalVnfmClient struct {
	grpc.ClientStream
}

func (x *nfvoServiceStartLocalVnfmClient) Send(m *StartLocalVnfmRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nfvoServiceStartLocalVnfmClient) CloseAndRecv() (*StartVnfmResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartVnfmResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nfvoServiceClient) StartFromPreviousVnfm(ctx context.Context, in *StartFromPreviousVnfmRequest, opts ...grpc.CallOption) (*StartVnfmResponse, error) {
	out := new(StartVnfmResponse)
	err := c.cc.Invoke(ctx, "/v1.NfvoService/StartFromPreviousVnfm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nfvoServiceClient) StartVnfm(ctx context.Context, in *StartVnfmRequest, opts ...grpc.CallOption) (*StartVnfmResponse, error) {
	out := new(StartVnfmResponse)
	err := c.cc.Invoke(ctx, "/v1.NfvoService/StartVnfm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nfvoServiceClient) ListVnfms(ctx context.Context, in *ListVnfmsRequest, opts ...grpc.CallOption) (*ListVnfmsResponse, error) {
	out := new(ListVnfmsResponse)
	err := c.cc.Invoke(ctx, "/v1.NfvoService/ListVnfms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nfvoServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (NfvoService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &NfvoService_ServiceDesc.Streams[1], "/v1.NfvoService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &nfvoServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NfvoService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type nfvoServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *nfvoServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nfvoServiceClient) GetVnfm(ctx context.Context, in *GetVnfmRequest, opts ...grpc.CallOption) (*GetVnfmResponse, error) {
	out := new(GetVnfmResponse)
	err := c.cc.Invoke(ctx, "/v1.NfvoService/GetVnfm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nfvoServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (NfvoService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &NfvoService_ServiceDesc.Streams[2], "/v1.NfvoService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &nfvoServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NfvoService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type nfvoServiceListenClient struct {
	grpc.ClientStream
}

func (x *nfvoServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nfvoServiceClient) StopVnfm(ctx context.Context, in *StopVnfmRequest, opts ...grpc.CallOption) (*StopVnfmResponse, error) {
	out := new(StopVnfmResponse)
	err := c.cc.Invoke(ctx, "/v1.NfvoService/StopVnfm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NfvoServiceServer is the server API for NfvoService service.
// All implementations must embed UnimplementedNfvoServiceServer
// for forward compatibility
type NfvoServiceServer interface {
	// StartLocalVnfm starts a VNF Manager on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the nfvo/config.yaml
	//   3. all bytes constituting the NFV Manager YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalVnfm(NfvoService_StartLocalVnfmServer) error
	// StartFromPreviousVnfm starts a new VNF Manager based on a previous one.
	// If the previous VNF Manager does not have the can-replay condition set this call will result in an error.
	StartFromPreviousVnfm(context.Context, *StartFromPreviousVnfmRequest) (*StartVnfmResponse, error)
	// StartVnfmRequest starts a new VNF Manager based on its specification.
	StartVnfm(context.Context, *StartVnfmRequest) (*StartVnfmResponse, error)
	// Searches for VNF Manager(s) known to this instance
	ListVnfms(context.Context, *ListVnfmsRequest) (*ListVnfmsResponse, error)
	// Subscribe listens to new VNF Manager(s) updates
	Subscribe(*SubscribeRequest, NfvoService_SubscribeServer) error
	// GetVnfm retrieves details of a single VNF Manager
	GetVnfm(context.Context, *GetVnfmRequest) (*GetVnfmResponse, error)
	// Listen listens to VNF Manager updates and log output of a running VNF Manager
	Listen(*ListenRequest, NfvoService_ListenServer) error
	// StopVnfm stops a currently running VNF Manager
	StopVnfm(context.Context, *StopVnfmRequest) (*StopVnfmResponse, error)
	mustEmbedUnimplementedNfvoServiceServer()
}

// UnimplementedNfvoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNfvoServiceServer struct {
}

func (UnimplementedNfvoServiceServer) StartLocalVnfm(NfvoService_StartLocalVnfmServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalVnfm not implemented")
}
func (UnimplementedNfvoServiceServer) StartFromPreviousVnfm(context.Context, *StartFromPreviousVnfmRequest) (*StartVnfmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousVnfm not implemented")
}
func (UnimplementedNfvoServiceServer) StartVnfm(context.Context, *StartVnfmRequest) (*StartVnfmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVnfm not implemented")
}
func (UnimplementedNfvoServiceServer) ListVnfms(context.Context, *ListVnfmsRequest) (*ListVnfmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVnfms not implemented")
}
func (UnimplementedNfvoServiceServer) Subscribe(*SubscribeRequest, NfvoService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNfvoServiceServer) GetVnfm(context.Context, *GetVnfmRequest) (*GetVnfmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVnfm not implemented")
}
func (UnimplementedNfvoServiceServer) Listen(*ListenRequest, NfvoService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedNfvoServiceServer) StopVnfm(context.Context, *StopVnfmRequest) (*StopVnfmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVnfm not implemented")
}
func (UnimplementedNfvoServiceServer) mustEmbedUnimplementedNfvoServiceServer() {}

// UnsafeNfvoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NfvoServiceServer will
// result in compilation errors.
type UnsafeNfvoServiceServer interface {
	mustEmbedUnimplementedNfvoServiceServer()
}

func RegisterNfvoServiceServer(s grpc.ServiceRegistrar, srv NfvoServiceServer) {
	s.RegisterService(&NfvoService_ServiceDesc, srv)
}

func _NfvoService_StartLocalVnfm_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NfvoServiceServer).StartLocalVnfm(&nfvoServiceStartLocalVnfmServer{stream})
}

type NfvoService_StartLocalVnfmServer interface {
	SendAndClose(*StartVnfmResponse) error
	Recv() (*StartLocalVnfmRequest, error)
	grpc.ServerStream
}

type nfvoServiceStartLocalVnfmServer struct {
	grpc.ServerStream
}

func (x *nfvoServiceStartLocalVnfmServer) SendAndClose(m *StartVnfmResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nfvoServiceStartLocalVnfmServer) Recv() (*StartLocalVnfmRequest, error) {
	m := new(StartLocalVnfmRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NfvoService_StartFromPreviousVnfm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousVnfmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfvoServiceServer).StartFromPreviousVnfm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NfvoService/StartFromPreviousVnfm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfvoServiceServer).StartFromPreviousVnfm(ctx, req.(*StartFromPreviousVnfmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NfvoService_StartVnfm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVnfmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfvoServiceServer).StartVnfm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NfvoService/StartVnfm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfvoServiceServer).StartVnfm(ctx, req.(*StartVnfmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NfvoService_ListVnfms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVnfmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfvoServiceServer).ListVnfms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NfvoService/ListVnfms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfvoServiceServer).ListVnfms(ctx, req.(*ListVnfmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NfvoService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NfvoServiceServer).Subscribe(m, &nfvoServiceSubscribeServer{stream})
}

type NfvoService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type nfvoServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *nfvoServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NfvoService_GetVnfm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVnfmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfvoServiceServer).GetVnfm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NfvoService/GetVnfm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfvoServiceServer).GetVnfm(ctx, req.(*GetVnfmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NfvoService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NfvoServiceServer).Listen(m, &nfvoServiceListenServer{stream})
}

type NfvoService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type nfvoServiceListenServer struct {
	grpc.ServerStream
}

func (x *nfvoServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NfvoService_StopVnfm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVnfmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NfvoServiceServer).StopVnfm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NfvoService/StopVnfm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NfvoServiceServer).StopVnfm(ctx, req.(*StopVnfmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NfvoService_ServiceDesc is the grpc.ServiceDesc for NfvoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NfvoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.NfvoService",
	HandlerType: (*NfvoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousVnfm",
			Handler:    _NfvoService_StartFromPreviousVnfm_Handler,
		},
		{
			MethodName: "StartVnfm",
			Handler:    _NfvoService_StartVnfm_Handler,
		},
		{
			MethodName: "ListVnfms",
			Handler:    _NfvoService_ListVnfms_Handler,
		},
		{
			MethodName: "GetVnfm",
			Handler:    _NfvoService_GetVnfm_Handler,
		},
		{
			MethodName: "StopVnfm",
			Handler:    _NfvoService_StopVnfm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalVnfm",
			Handler:       _NfvoService_StartLocalVnfm_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _NfvoService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _NfvoService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nfvo.proto",
}
